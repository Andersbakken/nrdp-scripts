#!/usr/bin/perl

use strict;
require LWP::UserAgent;
require HTTP::Request::Common;
import HTTP::Request::Common qw(GET);

if(system("git fetch --all") != 0 || $?) {
    die "Not a git repo?";
}
if(system("git svn fetch") != 0 || $?) {
    die "Not setup for svn fetch?";
}

my $force = 0;
my $verbose = 0;
while(@ARGV) {
    my $option = shift @ARGV;
    if($option eq "-v") {
        $verbose = 1;
    } elsif($option eq "-f") {
        $force = 1;
    }
}

sub git_exec {
    my ($exe) = @_;
    my $output;
    if(open(EXE, "git " . $exe . "|")) {
        $output = <EXE>;
        close(EXE);
    }
    #print "$exe -> $output\n";
    return $output;
}

sub update_branch {
    my ($branch_n, $tag_n, $svn_revision) = @_;

    my $git_revision = git_exec("svn find-rev r${svn_revision} trunk");
    chomp $git_revision;

    my $branch = "chromium_" . $branch_n;
    my $branch_oldsha = git_exec("show-ref -s $branch");
    chomp $branch_oldsha;

    my $tag = "chromium_" . $tag_n;
    my $tag_oldsha = git_exec("rev-parse --verify ${tag}^{commit}");
    chomp $tag_oldsha;

    print "branch=$branch tag=$tag revision=($svn_revision->$git_revision\n" if($verbose);

    if($force || !($tag_oldsha eq $git_revision) || !($branch_oldsha eq $git_revision)) {
        print "Updating(${branch_oldsha}::${tag_oldsha}): $branch -> $tag (${git_revision}::$svn_revision)\n";
        system("git tag -f -m \"$branch\" $tag $git_revision >/dev/null 2>&1");
        system("git branch -f $branch $git_revision >/dev/null 2>&1");
    }
}

#release channels from chromium
for(("all", "pending")) {
    my $m = $_;

    my $url = "http://omahaproxy.appspot.com/$m";
    print "Fetching: $m ($url)\n";
    my $req = GET($url);
    my $ua = new LWP::UserAgent;
    my $response = $ua->request($req);
    if($response->code != 200)
    {
        print "Unable to fetch!\n";
        next;
    }

    my $raw = $response->content;
    my @lines = split(/\n/, $raw);
    my @column_names = split(/,/, shift @lines);

    for(@lines) {
        my $line = $_;
        my @c = split(/,/, $line);
        my %columns;
        for(@column_names) {
            my $column = $_;
            $columns{$column} = shift @c;
        }
        update_branch($columns{os} . "_" . $columns{channel} . "_" . $m,
                      ($m eq "all") ? $columns{current_version} : $columns{version},
                      $columns{base_webkit_revision});
    }
}

#trunk on chromium
{
    print "Fetching: trunk\n";
    my $trunk_version;
    {
        my $version_url = "http://src.chromium.org/viewvc/chrome/trunk/src/chrome/VERSION";
        my $req = GET($version_url);
        my $ua = new LWP::UserAgent;
        my $response = $ua->request($req);
        if($response->code != 200) {
            print "Unable to fetch VERSION!\n";
        } else {
            my $raw = $response->content;
            my %pieces;
            for(split(/\n/, $raw)) {
                my $line = $_;
                $pieces{$1} = $2 if($line =~ /^([^ ]*) *= *([^ ]*)$/);
            }
            $trunk_version = $pieces{"MAJOR"} . "." . $pieces{"MINOR"} . "." . $pieces{"BUILD"} . "." . $pieces{"PATCH"};
        }
    }
    my $trunk_revision;
    {
        my $revision_url = "http://src.chromium.org/viewvc/chrome/trunk/src/DEPS";
        my $req = GET($revision_url);
        my $ua = new LWP::UserAgent;
        my $response = $ua->request($req);
        if($response->code != 200) {
            print "Unable to fetch REVISION!\n";
        } else {
            my $raw = $response->content;
            my %pieces;
            for(split(/\n/, $raw)) {
                my $line = $_;
                if($line =~ /^ *\"webkit_revision\": *\"([0-9]*)\", *$/) {
                    $trunk_revision = $1;
                    last;
                }
            }
        }
    }
    update_branch("trunk", $trunk_version, $trunk_revision);
}


