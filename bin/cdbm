#!/usr/bin/perl

use Cwd;
use Cwd 'abs_path';
use Pod::Usage;
use File::Spec;
use File::Basename;

use strict;

my $CDBMRC_FILE = "$ENV{HOME}/.cdbmrc";
my $CDBM_HISTORY_FILE = "$ENV{HOME}/.cdbm_history";
my $EDITOR;
$EDITOR = $ENV{EDITOR};
$EDITOR = "/bin/vi" unless( defined( $EDITOR ) );

if(!@ARGV) {
    my @paths = cdbm_get(0);
    if( !@paths ) {
      cdbm_chose( $ENV{HOME} );
    } else {
      cdbm_chose( cdbm_pick(0, @paths) );
    }
    exit 0;
}

my $path;
my $action = $ARGV[0];
#($action, $path) = ( =~ /([+-][shel0-9]?)(.*)/);
$path = $ARGV[1] if (!$path and $ARGV[1]);

sub uniq {
    my %seen = ();
    my @r = ();
    foreach my $a (@_) {
        unless ($seen{$a}) {
            push @r, $a;
            $seen{$a} = 1;
        }
    }
    return @r;
}

sub canonicalize {
    my ($file, $base) = @_;
    my $result = $file;
    if(!File::Spec->file_name_is_absolute($result) && defined($base)) {
        $result = File::Spec->rel2abs($result, $base);
    }
    $result =~ s,/*$,,g;
    $result =~ s,/+,/,g;
    $result = abs_path($result) if(length($result) && -e $result);
    $result = "/" unless(length($result));
    return $result;
}

my $cwd = Cwd::getcwd();
if (exists($ENV{PWD}) && $ENV{PWD} ne $cwd) {
    my $e = my ($e_dev, $e_node) = stat($ENV{PWD});
    my $c = my ($c_dev, $c_node) = stat($cwd);
    if ($e && $c && $e_dev == $c_dev && $e_node == $c_node) {
        $cwd = $ENV{PWD};
    }
}

if($action =~ /\+/) {
  $path = $cwd unless length($path);
  cdbm_add($path, 0);
} elsif ($action =~ /^--help/ || $action =~ /^-h/) {
  pod2usage();
} elsif($action =~ /^-l$/) {
    print STDERR "Bookmarks:\n";
    cdbm_show( cdbm_get(0) );
    print STDERR "History:\n";
    cdbm_show( cdbm_get(1) );
} elsif($action =~ /^-lb$/) {
  cdbm_show( cdbm_get(0) );
} elsif($action =~ /^-lh$/) {
  cdbm_show( cdbm_get(1) );
} elsif($action =~ /^-e/) {
    system("$EDITOR $CDBMRC_FILE");
} elsif($action =~ /^-eh/) {
    system("$EDITOR $CDBM_HISTORY_FILE");
} elsif($action =~ /^-r/) {
    my $history = 0;
    if( length($path) ) {
      if($path =~ /^%([0-9]*)$/) {
	my $num = $1;
	$num -= 1;
	$history = 1;
	my @paths = cdbm_get(1);
	if ( $num >= 0 && $num <= $#paths ) {
	  $path = $paths[$num];
	} else {
	  die "No matches($num)";
	}
      } elsif($path =~ /^([%0-9]*)$/) {
	my $num = $1;
	$num -= 1;
	my @paths = cdbm_get(0);
	if ( $num >= 0 && $num <= $#paths ) {
	  $path = $paths[$num];
	} else {
	  die "No matches($num)";
	}
      }
    } else {
      $path = $cwd;
    }
    cdbm_remove($path,$history);
} elsif($action =~ /^%$/) {
  my @paths = cdbm_get(1);
  cdbm_chose( cdbm_pick(1, @paths ) );
} elsif($action =~ /^-([0-9]+)(.*)$/) {
    my $num = $1;
    my $rest = $2;
    if( defined( $num ) ) {
      $num -= 1;
      my $path = "";
      my @paths = cdbm_get(0);
      if ( $num >= 0 && $num <= $#paths ) {
	$path = $paths[$num];
      } else {
	die "No matches($num)";
      }
      $path .= $rest;
      cdbm_chose( $path, 1 );
    } else {
      $path = $cwd unless length($path);
      cdbm_remove($path, 0);
    }
} elsif($action =~ /^%([%0-9]*)(.*)$/) {
    my $num = $1;
    my $rest = $2;
    if( defined( $num ) ) {
      my $path;
      my @paths = cdbm_get(1);
      if ( $num eq "%" ) {
	if ( $ENV{OLDPWD} ) {
	  $path = $ENV{OLDPWD};
	} else {
	  $path = $paths[1];
	}
      } else {
	$num -= 1;
	$path = $paths[$num] if ( $num >= 0 && $num <= $#paths );
      }
      if( defined( $path ) ) {
	$path .= $rest;
	cdbm_chose( $path, 1 );
      } else {
	die "No matches($num)";
      }
    }
} elsif($action =~ /^(-*)$/) {
    my $path;
    my $num = ($action =~ tr/-/-/);
    if ( $num == 1 && $ENV{OLDPWD} ) {
      $path = $ENV{OLDPWD};
    } else {
      my @paths = cdbm_get(1);
      $path = $paths[$num] if ( $num >= 0 && $num <= $#paths );
    }
    if ( defined( $path ) ) {
      cdbm_chose( $path, 1 );
    } else {
      die "No matches($num)";
    }
} else {
    #print STDERR "$#ARGV\n";
    if ($#ARGV == 0) {
        my $dir = $ARGV[0];
        $dir =~ s{ ^ ~ ( [^/]* ) }
        { $1
              ? (getpwnam($1))[7]
              : ( $ENV{HOME} || $ENV{LOGDIR}
                  || (getpwuid($<))[7]
              )
        }ex;
        #print STDERR "DIR: $dir\n";
        if(-d $dir) {
            cdbm_chose( $dir );
            exit(1);
        } elsif(-e $dir) {
            cdbm_chose( dirname($dir) );
            exit(1);
        }
    }
    my @paths;
    push(@paths, cdbm_get(0) );
    push(@paths, cdbm_get(1) );
    for (my $i = 0; $i <= $#ARGV; $i++) {
        @paths = grep { /$ARGV[$i]/i } @paths;
    }
    if( $#paths == -1 ) {
        die "No match: $ARGV[0]" if ($#ARGV == 0);
        die "Unable to match.";
    } elsif( $#paths == 0 ) {
	cdbm_chose($paths[0], 1);
    } else {
        cdbm_chose( cdbm_pick(undef, @paths ) );
    }
}

#############################################################
sub cdbm_chose {
#############################################################
    my($path,$show) = @_;
    #print STDERR "CHOSE1: $path\n";
    $path = File::Spec->rel2abs($path, $cwd);
    #print STDERR "CHOSE2: $path\n";

    cdbm_add($path, 1 );
    print STDERR "$path\n" if($show);
    print $path, "\n";
}

#############################################################
sub cdbm_show {
#############################################################
    my(@paths) = @_;

    my $counter = 1;

    for(@paths) {
      my $path = $_;
      print STDERR "[$counter] $path\n";
      ++$counter;
    }

    return $counter
}

#############################################################
sub cdbm_pick {
#############################################################
    my($history,@paths) = @_;

    die "Nothing to pick from" unless @paths;

    my $counter = cdbm_show( @paths );

    $| = 1;

    while(1) {
      print STDERR "[1..", $counter-1, "]>";
      my $input = <STDIN>;
      chomp $input;
      if($input =~ /^-([0-9,]+)$/) {
        cdbm_remove($paths[$1-1],$history);
        next;
      }
      return $paths[$1-1] . $2 if( $input =~ /^([0-9]+)(.*)$/ );
      die "Nothing chosen!";
    }
}

#############################################################
sub cdbm_get {
#############################################################
    my($history) = @_;

    my $file = $CDBMRC_FILE;
    $file = $CDBM_HISTORY_FILE if( $history );
    my @paths = ();
    if($history && open FILE, "<$file") {
        while(<FILE>) {
	  my $path = canonicalize($_);
	  next if( $path =~ /^\s*$/ );
	  next if( $path =~ /^\s*#/ );
	  chomp $path;
	  next unless( -d $path );
	  push @paths, $path;
        }
        close FILE;
    }
       
    return uniq(@paths);
}

#############################################################
sub cdbm_add {
#############################################################
    my($path, $history) = @_;

    $path = canonicalize($path);
    if (-d $path) {
      my $append = 1;
      my @paths = cdbm_get($history);
      for (my $i = 0; $i <= $#paths; $i++) {
	if ($paths[$i] eq $path) {
	  if( !$i ) {
	    #warn "$path most recent($history)\n";
	    return;
	  }
	  splice @paths, $i, 1;
	  last;
	}
      }
      if( $history ) {
	$append = 0;
	unshift @paths, $path;
	$#paths = 50;
      } else {
	push @paths, $path;
      }
      if ( $append ) {
	#warn "$path appended($history)";
	cdbm_write_append($path, $history);
      } else {
	#warn "$path shuffled($history)";
	cdbm_write_new($history, @paths );
      } 
    } else {
      warn "$path no directory($history)\n";
      return;
    }
}

#############################################################
sub cdbm_write_new {
#############################################################
    my($history,@paths) = @_;
    my $file = $CDBMRC_FILE;
    $file = $CDBM_HISTORY_FILE if( $history );
    open FILE, ">$file" or die "Cannot open $file";
    foreach $path (@paths) {
      print FILE $path, "\n";
    }
    close FILE;

}

#############################################################
sub cdbm_write_append {
#############################################################
    my($path,$history) = @_;
    my $file = $CDBMRC_FILE;
    $file = $CDBM_HISTORY_FILE if( $history );
    open FILE, ">>$file" or die "Cannot open $file";
    print FILE $path, "\n";
    close FILE;
}

#############################################################
sub cdbm_remove {
#############################################################
    my($path,$history) = @_;
    unless(defined($history)) {
      cdbm_remove($path,0);
      cdbm_remove($path,1);
      return;
    }
    my $file = $CDBMRC_FILE;
    $file = $CDBM_HISTORY_FILE if( $history );
    warn "Removing $path($history)\n";
    my @paths = grep { $_ ne $path } cdbm_get($history);
    cdbm_write_new($history,@paths); 
}

__END__

=head1 NAME

cdbm - Bookmarks for shell directory navigation

=head1 DOWNLOAD

_SRC_HERE_

=head1 SYNOPSIS

    cdbm [+-[path]]

=head1 DESCRIPTION

C<cdbm> is a bookmark utility for shell directories to releave the shell user from
remembering and retyping various directory paths.

When called, C<cdbm> will display a list of path names and let the user
choose one by typing the number displayed next to it:

    $ cdbm 
    [1] /apps/NES/https-mike
    [2] /home/mschilli/projects/cdbm
    [3] /usr/lib/perl5/site_perl
    [1-3]>

C<cdbm> by itself its relatively
useless. No program executed by the shell is able to change the shell's current directory,
C<cdbm> is no exception, because it's executed by the shell in a subprocess.
However, in combination with shell aliases and functions (ksh and bash), it unleashes its real power:

    function c { cd `cdbm`; ls }

If the shell's initialisation file (.bashrc, .ksh) contains the line above, the newly 
created 'command' C<c> will first display a list of directories, let the user
choose one and then switch to it:

    [/tmp] $ c
    [1] /apps/NES/https-mike
    [2] /home/mschilli/projects/cdbm
    [3] /usr/lib/perl5/site_perl
    [1-3]>2
    /home/mschilli/projects/cdbm
    Makefile.PL eg t blib MANIFEST
    [/home/mschilli/projects/cdbm] $

All that C<cdbm> does is print out the chosen path name, which is then caught by 
the shell function C<c>, which runs C<cd> on it and effectively carries the user
over to the chosen directory, in which it runs a C<ls> command for better 
orientation.

C<cdbm> stores the path names in the file C<.cdbmrc> in the user's home directory.
For convenient access, it offers command line options to add, remove and
edit the path collection in C<.cdbmrc>:

    cdbm +/foo/bar/path    # Add a path to the collection
    cdbm -/foo/bar/path    # Remove a path from the list
    cdbm +                 # Add the current path to the list
    cdbm -                 # Remove the current path from the list
    cdbm -e                # Invoke an editor to edit C<.cdbmrc>
    cdbm -r                # Remove the current path from the list
    cdbm -h                # Print help page

=head1 FILES

    ~/.cdbmrc

=head1 THANKS

Thanks to Ralf Mei?ner for fixing a bug in cdbm_remove() and adding
support for sorted lists and more.

=head1 LEGALESE

Copyright 2002 by Mike Schilli, all rights reserved.
This program is free software, you can redistribute it and/or
modify it under the same terms as Perl itself.

=head1 AUTHOR

2002, Mike Schilli <m@perlmeister.com>
