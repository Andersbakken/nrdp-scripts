#!/bin/bash
if [ -z "$NF_HTTPD_PREFIX" ]; then
    echo "Need to specific NF_HTTPD_PREFIX [dir:url]!"
    exit 1
fi
choose_opts="-a"
write=
stub=0
stdin=0
editfile=0
bug=
url=
name=
while [ "$#" -gt 0 ]; do
    case "$1" in
        -f|--force)
            write=1
            ;;
        -)
            editfile=1
            write=1
            stdin=1
            ;;
        -s|--stub)
            editfile=1
            write=1
            stub=1
            ;;
        -n|--no-edit|--no-open)
            editfile=0
            ;;
        -e|--edit|-o|--open)
            editfile=1
            ;;
        -[0-9]*)
            choose_opts="$choose_opts $1"
            ;;
        *)
            if [ -z "$bug" ]; then
                bug="$1"
            elif [ -z "$url" ]; then
                url="$1"
            elif [ -z "$name" ]; then
                name="$1"
            else
                echo "Not sure what to do with this argument. I already have a bug [$bug], a url [$url] and a name [$name]"
                exit 1
            fi
            ;;
    esac
    shift
done
if [ -z "$bug" ]; then
    TESTS="`echo $NF_HTTPD_PREFIX | cut -d: -f1`/gibbontest-*"
    bug=`choose.pl $choose_opts -x "ls -t $TESTS"`
    bug=`basename $bug | sed -e 's,^gibbontest-,,' -e 's,\.js$,,'`
fi
if [ -n "$url" ] && echo $url | grep '^[0-9]*$' >/dev/null 2>&1; then
    url="/tmp/widget_${url}.js"
fi
if [ -z "$name" ] && [ ! -e "$url" ] && echo $url | grep -v "^https*://" >/dev/null 2>&1; then
    name="$url"
    url=""
fi

[ -z "$name" ] && name="$bug"
echo $name | grep '\.js$' >/dev/null 2>&1 || name="${name}.js"
test_file="`echo $NF_HTTPD_PREFIX | cut -d: -f1`/gibbontest-$name"
test_url="`echo $NF_HTTPD_PREFIX | cut -d: -f2-`/gibbontest-$name"

if [ '!' -e "$test_file" ]; then
    write=1;
elif [ -z "$write" ]; then
    if [ -z "$url" ]; then
        write=0;
    elif [ -e "$test_file" ]; then
        /bin/echo -n "Replace? "
        read write
        if [ "$write" = "no" ] || [ "$write" = "n" ]; then
            exit 0;
        fi
        write=1
    fi
fi

if [ "$write" = "1" ]; then
    if [ "$stub" = "1" ]; then
        cat >"$test_file" <<EOF
/*global nrdp*/
function keyboardHandler(key)
{
    if (key.data.type == "press" && key.data.text == 'a') {
    }
    nrdp.log.error("Got Key: " + JSON.stringify(key));
}
function networkResponseHandler(event) {
    nrdp.log.error("Got response " + event.state + " data: " + event.size);
}
function onImageLoaded(event) {
    nrdp.log.error("Got image loaded " + JSON.stringify(event));
}
function onTimeout() {
}
var w;
function main() {
    nrdp.setServerTime(parseInt(new Date().valueOf() / 1000));
    nrdp.gibbon.addEventListener("key", keyboardHandler);
    // nrdp.gibbon.load({url:"http://en.wikipedia.org/wiki/Leif_Erikson", headers: {"X-Gibbon-Cache-Control:max-age:1000}}, networkResponseHandler);
    nrdp.gibbon.scene.widget = w = nrdp.gibbon.makeWidget({width:1280, height:720, color:"#00ff00"});
    // w.image.url = {url:"http://cdn-1.nflximg.com/images/7516/817516.jpg"};"
    // nrdp.gibbon.setTimeout(onTimeout, 0);
}
nrdp.gibbon.init(main);
EOF
    elif [ "$stdin" = "1" ]; then
        cat >"$test_file"
    elif [ -e "$url" ]; then
        cp -f "$url" "$test_file"
    else
        if which jira >/dev/null 2>&1; then
            if [ -z "$url" ]; then
                if [ -z "$JIRA_PASSWORD" ]; then
                    if [ -z "$JIRA_PASSWORD_COMMAND" ] && [ -f "$JIRA_PASSWORD_FILE" ]; then
                        DIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )
                        JIRA_PASSWORD_COMMAND="$DIR/git-jira-password-command.sh $JIRA_PASSWORD_FILE"
                    fi
                    if [ -n "$JIRA_PASSWORD_COMMAND" ]; then
                        JIRA_PASSWORD="`$JIRA_PASSWORD_COMMAND`"
                    fi

                    if [ -z "$JIRA_PASSWORD" ]; then
                        read -p "JIRA Password: " -s JIRA_PASSWORD
                    fi
                fi
                JIRA_ARGS=
                [ -n "$JIRA_PASSWORD" ] && JIRA_ARGS="$JIRA_ARGS --password $JIRA_PASSWORD"
                urls=
                urls="$urls `jira $JIRA_ARGS --action getIssue --issue $bug    | grep -o 'https*://[^ ]*'`"
                urls="$urls `jira $JIRA_ARGS --action getComments --issue $bug | grep -o 'https*://[^ ]*'`"
                url=`choose.pl $choose_opts -u  $urls`
            fi
            if echo "$url" | grep "/secure/attachment/" >/dev/null 2>&1; then
                if [ -z "$JIRA_PASSWORD" ] && [ -n "$JIRA_PASSWORD_COMMAND" ]; then
                    JIRA_PASSWORD="`$JIRA_PASSWORD_COMMAND`"
                fi
                JIRA_ARGS=
                if [ -z "$JIRA_PASSWORD" ]; then
                    read -p "JIRA Password: " -s JIRA_PASSWORD
                fi
                [ -n "$JIRA_PASSWORD" ] && JIRA_ARGS="$JIRA_ARGS --password $JIRA_PASSWORD"
                tmpfile=`echo $url | sed "s,^.*/secure/attachment/[0-9]*/,,"`
                mkdir -p "/tmp/`dirname $tmpfile`"
                (cd /tmp; jira $JIRA_ARGS --action getAttachment --issue "$bug" --file "$tmpfile")
                url="file:///tmp/$tmpfile"
            fi
        fi

        if [ -z "$url" ]; then
            echo "No known URL!"
        else
            echo "nrdp.gibbon._baseUrl = \"$url\";" >$test_file
            curl "$url" >>$test_file
        fi
  fi
fi

if [ -e "$test_file" ]; then
    echo "File: $test_file"
    echo "URL: $test_url"
    if [ "$editfile" = "1" ]; then
        if [ -n "$NF_EDITOR" ]; then
            $NF_EDITOR "$test_file"
        elif [ -n "$EDITOR" ]; then
            $EDITOR "$test_file"
        else
            echo "Neither \$EDITOR nor \$NF_EDITOR are set. Not sure what to do"
        fi
    fi
        echo -e "$test_url" | yank -c >/dev/null 2>&1
fi
