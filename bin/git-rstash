#!/usr/bin/perl

use Env;
use strict;

my $stash_mode;
if($ARGV[0] eq "-m") {
    shift @ARGV;
    $stash_mode = $ARGV[0];
    shift @ARGV;
} else {
    $stash_mode = `git config rstash.mode`;
}
$stash_mode = "git-rstash" if(!length($stash_mode));

my $mode = "save";
$mode = shift @ARGV if($#ARGV >= 0 && ($ARGV[0] eq "save" || $ARGV[0] eq "apply" || $ARGV[0] eq "show" || $ARGV[0] eq "list"));

if($stash_mode eq "git-rstash") {
    my $commit = 1;
    my $server_port = undef;
    my $source_highlight = 1;
    my $pager = $ENV{"PAGER"};
    my $sha = "DEFAULT";
    my $url = undef;
    while(@ARGV) {
	if($ARGV[0] eq "-p") {
	    shift @ARGV;
	    $server_port = $ARGV[0];
	} elsif($ARGV[0] eq "-c") {
	    shift @ARGV;
	    $sha = $ARGV[0];
	} elsif($ARGV[0] eq "--no-pager") {
	    $pager = undef;
	} elsif($ARGV[0] eq "--no-highlight") {
	    $source_highlight = 0;
	} elsif($ARGV[0] eq "-n" || $ARGV[0] eq "--no-commit") {
	    $commit = 0;
	} else {
	    $url = $ARGV[0];
	    $url =~ s,/$,,g;
	}
	shift @ARGV;
    }

    if($mode eq "save") {
	sub parseQuery {
	    my ($query) = @_;

	    my %result;
	    my @pairs = split(/&/, $query);
	    foreach my $pair (@pairs){
		my ($name, $value) = split (/=/, $pair);
		$name =~ tr/+/ /;
		$name =~ s/%([a-fA-F0-9][a-fA-F0-9])/pack("C", hex($1))/eg;
		$value =~ tr/+/ /;
		$value =~ s/%([a-fA-F0-9][a-fA-F0-9])/pack("C", hex($1))/eg;
		$result{$name} = $value;
	    }
	    return \%result;
	}

	use HTTP::Daemon;
	use HTTP::Status;

	my $d = HTTP::Daemon->new(LocalPort => $server_port) || die;
	print "git-rstash: <", $d->url, ">\n";
        ACCEPT: while(my $c = $d->accept) {
	  while(my $r = $c->get_request) {
	      if($r->method eq 'GET') {
		  my $result;
		  my $result_type = "text/plain";
		  my $uri = $r->uri->path;
		  my $query = parseQuery($r->uri->query);

		  my $raw = $query->{raw};

		  $uri =~ s,/$,,g;
		  if($uri =~ "^/fetch/(.*)") {
		      my $fetch = $1;
		      if($fetch eq "DEFAULT") {
			  if($sha eq "DEFAULT") {
			      $fetch = "HEAD";
			  } else {
			      $fetch = $sha;
			  }
		      }
		      if(!$raw && $source_highlight) {
			  $result_type = "text/html";
			  $result = "<html>" . `git format-patch $fetch -1 --stdout | source-highlight -s diff -f html` . "</html>";
		      } else {
			  $result = `git format-patch $fetch -1 --stdout`;
		      }
		      exit 0 if($query->{exit});
		  } else {
		      if(!$raw || !length($uri)) {
			  $result_type = "text/html";
			  $result = "<html><ul>" . `git log -n 50 --pretty="<li><a href="/fetch/%h?raw=0">%h</a> %s (%an) [<a href="/fetch/%h?raw=1">RAW</a>]</li>"` . "</ul></html>";
		      } else {
			  $result = `git log`;
		      }
		  }
		  $c->send_response(HTTP::Response->new(RC_OK, undef,
							[
							 'Content-Type' => $result_type,
							 'Cache-Control' => 'no-store, no-cache, must-revalidate, post-check=0, pre-check=0',
							 'Pragma' => 'no-cache',
							],
							$result));
	      }
	  }
	  $c->close;
	  undef($c);
      }
    } else {
	die "No URL supplied!" unless($url);
	if($mode eq "show") {
	    $url = "$url/fetch/$sha?raw=1";
	} elsif($mode eq "apply") {
	    $url = "$url/fetch/$sha?raw=1&exit=1";
	} elsif($mode eq "list") {
	    $url = "$url/list?raw=1";
	}

	use LWP::UserAgent;
	use HTTP::Request::Common qw(GET);

	my $req = GET($url);
	my $ua = new LWP::UserAgent;
	my $response = $ua->request($req);
	if($response->code == 200) {
	    *OUTPUT = *STDOUT;
	    if($mode eq "apply") {
		open(OUTPUT, "|git am -3") || die("Cannot git apply!");
	    } else {
		my $command = "";
		$command = "| source-highlight -s diff -f esc" if($source_highlight);
		$command = "$command | $pager" if($pager);
		*OUTPUT = *FILTER_OUTPUT if(open(FILTER_OUTPUT, "$command"));
	    }
	    print OUTPUT $response->content;
	    close(OUTPUT);
	} else {
	    die "Failed!";
	}
    }
} elsif($stash_mode eq "git-remote") {
}
