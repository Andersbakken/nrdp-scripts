#!/bin/bash

SCRIPT_DIR="$(dirname ${BASH_SOURCE[0]} )"

MODE="submit"
if [ "$1" = "create" ]; then
    MODE="create"
    shift
elif [ "$1" = "show" ]; then
    MODE="show"
    shift
elif [ "$1" = "list" ]; then
    MODE="list"
    shift
elif [ "$1" = "branch" ]; then
    MODE="branch"
    shift
elif [ "$1" = "submit" ]; then
    MODE="submit"
    shift
elif [ "$1" = "issues" ]; then
    MODE="issues"
    shift
elif [ "$1" = "fetch" ]; then
    MODE="fetch"
    shift
elif [ "$1" = "prefix" ]; then
    MODE="prefix"
    shift
fi

PULL_REQUEST_USER=`git config user.email | cut -d@ -f1`
[ -z "$PULL_REQUEST_USER" ] && PULL_REQUEST_USER=`whoami`
PULL_REQUEST_AUTO_PREFIX="auto/"
PULL_REQUEST_PREFIX=`git config pullrequest.prefix`
[ -z "$PULL_REQUEST_PREFIX" ] && PULL_REQUEST_PREFIX="pr/${PULL_REQUEST_USER}"
PULL_REQUEST_REPO=`git config pullrequest.repo`
PULL_SCM=`git config pullrequest.scm | cut -d@ -f1`
if [ -z "$PULL_SCM" ]; then
    PULL_ORIGIN=`git remote get-url origin`
    if echo "${PULL_ORIGIN}" | grep -q github; then
        PULL_SCM="github"
    elif echo "${PULL_ORIGIN}" | grep -q stash; then
        PULL_SCM="stash"
    else
        PULL_SCM="github"
    fi
fi
if [ "$PULL_SCM" = "stash" ]; then
    PULL_REQUEST_STASH_PROJECT=`echo $PULL_REQUEST_REPO | cut -d/ -f1`
    PULL_REQUEST_REPO=`echo $PULL_REQUEST_REPO | cut -d/ -f2`
else
    PULL_REQUEST_GITHUB_OWNER=`echo $PULL_REQUEST_REPO | cut -d/ -f1`
    PULL_REQUEST_REPO=`echo $PULL_REQUEST_REPO | cut -d/ -f2`
    if [ "${PULL_REQUEST_GITHUB_OWNER}" = "corp" ]; then
        runcurl() {
            REQ="$1"
            shift
            #echo curl -k --key ~/.metatron/certificates/client.key --cert ~/.metatron/certificates/client.crt "$@" "https://git.netflix.net/api${REQ}" >&2
            curl --silent -k --key ~/.metatron/certificates/client.key --cert ~/.metatron/certificates/client.crt "$@" "https://git.netflix.net/api${REQ}"
        }
    else
        runcurl() {
            REQ="$1"
            shift
            #echo curl "$@" "https://github.com/api/${REQ}" >&2
            curl --silent "$@" "https://github.com/api/${REQ}"
        }
    fi
fi

if [ "$MODE" = "create" ]; then
    PR_FROM_BRANCH=
    PR_TO_BRANCH=
    PR_REVIEWERS=
    PR_DESCRIPTION=
    while [ "$#" -ge 1 ]; do
        if [ "$1" = "--reviewer" ]; then
            shift
            PR_REVIEWERS="$PR_REVIEWERS $1"
        elif [ "$1" = "--description" ]; then
            shift
            PR_DESCRIPTION="$1"
        elif [ -z "$PR_FROM_BRANCH" ]; then
            PR_FROM_BRANCH="$1"
        elif [ -z "$PR_TO_BRANCH" ]; then
            PR_TO_BRANCH="$1"
        else
            echo "Unknown option: $1"
        fi
        shift
    done
    if [ -z "$PR_FROM_BRANCH" ]; then
        echo "Usage: $0 from [to]"
        exit 3
    fi
    [ -z "$PR_TO_BRANCH" ] && PR_TO_BRANCH=`git tracking`
    if [ -n "$PULL_REQUEST_CHECK" ] && git log -p "origin/${PR_TO_BRANCH}..origin/${PR_FROM_BRANCH}" | grep -i "${PULL_REQUEST_CHECK}"; then
        echo PULL_REQUEST_CHECK failed, unset and rerun to force
        exit 1
    fi
    if [ "$PULL_SCM" = "stash" ]; then
        $SCRIPT_DIR/nrdp-service/cli.js --mode stash.pr.create --username "${PULL_REQUEST_USER}" --description "${PR_DESCRIPTION}" --reviewers "${PR_REVIEWERS}" --from "${PR_FROM_BRANCH}" --to "${PR_TO_BRANCH}" --repo "${PULL_REQUEST_REPO}" --project "${PULL_REQUEST_STASH_PROJECT}"
    else
        PR_DIR=`mktemp -d /tmp/pr-XXXXXX`
        cat >>"${PR_DIR}/in.json" <<EOF
{
            "title": "${PULL_REQUEST_REPO}: ${PR_FROM_BRANCH}->${PR_TO_BRANCH}",
            "body": "$(echo ${PR_DESCRIPTION} | sed -e ':a;N;$!ba;s/\n/\\n/g' | sed -e 's,\",\\\",g' 2>/dev/null)",
            "head": "${PR_FROM_BRANCH}",
            "base": "${PR_TO_BRANCH}"
}
EOF
        #cat "${PR_DIR}/in.json"
        runcurl "/v3/repos/${PULL_REQUEST_GITHUB_OWNER}/${PULL_REQUEST_REPO}/pulls" -X POST -H "Accept: application/vnd.github+json" -H "Content-Type: application/json" -d "@${PR_DIR}/in.json" >"${PR_DIR}/create.json"
        #cat "${PR_DIR}/create.json"
        PR=$(jq -r '.number' ${PR_DIR}/create.json)
        PR_NODE=""
        if [ "$PR" != "null" ]; then
            runcurl "/v3/repos/${PULL_REQUEST_GITHUB_OWNER}/${PULL_REQUEST_REPO}/pulls/${PR}" -H "Accept: application/vnd.github+json" -X GET >"${PR_DIR}/pr.json"
            #cat "${PR_DIR}/pr.json"
            PR_NODE=$(jq -r '.node_id' "${PR_DIR}/pr.json")
        elif grep -q "already exists" "${PR_DIR}/create.json"; then
            runcurl "/v3/repos/${PULL_REQUEST_GITHUB_OWNER}/${PULL_REQUEST_REPO}/pulls?base=${PR_TO_BRANCH}&head=${PULL_REQUEST_GITHUB_OWNER}:${PR_FROM_BRANCH}" -H "Accept: application/vnd.github+json" -X GET >"${PR_DIR}/pr.json"
            #cat "${PR_DIR}/pr.json"
            PR=$(jq -r '.[0].number' "${PR_DIR}/pr.json")
            [ "$PR" != "null" ] && PR_NODE=$(jq -r '.[0].node_id' "${PR_DIR}/pr.json")
        else
            cat "${PR_DIR}/create.json"
        fi
        if [ -n "$PR_NODE" ]; then
            echo "PullRequest: https://github.netflix.net/${PULL_REQUEST_GITHUB_OWNER}/${PULL_REQUEST_REPO}/pull/${PR} (${PR_NODE})"
            if echo "${PR_FROM_BRANCH}" | grep -q "${PULL_REQUEST_PREFIX}/${PULL_REQUEST_AUTO_PREFIX}"; then
                MERGE_METHOD=`git config pullrequest.automergeMethod`
                [ -z "$MERGE_METHOD" ] && MERGE_METHOD="REBASE"
                AUTO_QUERY="{ \"query\": \"mutation {enablePullRequestAutoMerge(input: {pullRequestId: \\\"${PR_NODE}\\\", mergeMethod: ${MERGE_METHOD}}) {clientMutationId}}\" }"
                runcurl "/graphql" -d "${AUTO_QUERY}" -H "Content-Type: application/json" -X POST >"${PR_DIR}/automerge.json"
                ERROR=$(jq -r '.errors[0].message' "${PR_DIR}/automerge.json")
                [ "$ERROR" != "null" ] && echo "AutoMergeError: ${ERROR}"
            fi
        fi
        rm -rf "${PR_DIR}"
    fi
elif [ "$MODE" = "prefix" ]; then
    echo "$PULL_REQUEST_PREFIX"
elif [ "$MODE" = "fetch" ]; then
    if [ "$PULL_SCM" = "stash" ]; then
        git fetch origin "+refs/pull-requests/*:refs/remotes/origin/heads/pull-requests/*" "+refs/pull-requests/*:refs/remotes/origin/heads/pr/*"
    else
        echo "Need to implement ${PULL_SCM}" >&2
        exit 1
    fi
elif [ "$MODE" = "branch" ]; then
    if [ "$1" = "delete" ]; then
        git push origin ":${PULL_REQUEST_PREFIX}/${2}"
    elif [ -n "$1" ]; then
        echo "${PULL_REQUEST_PREFIX}/${1}"
    else
        git branch -r | grep "origin/${PULL_REQUEST_PREFIX}" | sed 's,^ *origin/*,,'
    fi
elif [ "$MODE" = "show" ]; then
    PR_DIR=`mktemp -d /tmp/pr-XXXXXX`
    if [ "$PULL_SCM" = "stash" ]; then
        echo "Need to implement ${PULL_SCM}" >&2
        exit 1
    else
        runcurl "/v3/repos/${PULL_REQUEST_GITHUB_OWNER}/${PULL_REQUEST_REPO}/commits/${1}/pulls" -H "Accept: application/vnd.github+json" -X GET >"${PR_DIR}/pr.json"
        PRS=$(jq -r '. | length' "${PR_DIR}/pr.json")
        for ((i=0; i<$PRS; i++ )); do
            NUM=$(jq -r ".[$i].number" "${PR_DIR}/pr.json")
            URL=$(jq -r ".[$i]._links.html.href" "${PR_DIR}/pr.json")
            STATE=$(jq -r ".[$i].state" "${PR_DIR}/pr.json")
            echo "${NUM}[${STATE}] ${URL}"
        done
    fi
    rm -rf "$PR_DIR"
elif [ "$MODE" = "issues" ]; then
    PR_DIR=`mktemp -d /tmp/pr-XXXXXX`
    if [ "$PULL_SCM" = "stash" ]; then
        ISSUES_FILE="${PR_DIR}/pr-issues"
        $SCRIPT_DIR/nrdp-service/cli.js --mode stash.pr.issues --username "${PULL_REQUEST_USER}" --repo "${PULL_REQUEST_REPO}" --project "${PULL_REQUEST_STASH_PROJECT}" --pullRequest "$1" >"${ISSUES_FILE}"
        ISSUES_COUNT=$(jq -r '. | length' "${ISSUES_FILE}")
        for ((i=0; i<$ISSUES_COUNT; i++ )); do
            ISSUE=$(jq -r ".[$i].key" "$ISSUES_FILE")
            ISSUE_URL=$(jq -r ".[$i].url" "$ISSUES_FILE")
            echo "${ISSUE} ($ISSUE_URL)"
        done
    else
        runcurl "/v3/repos/${PULL_REQUEST_GITHUB_OWNER}/${PULL_REQUEST_REPO}/pulls/${PR}" -H "Accept: application/vnd.github+json" -X GET >"${PR_DIR}/pr.json"
    fi
    rm -rf "$PR_DIR"
elif [ "$MODE" = "list" ]; then
    PR_MAX=5
    PR_STATE=
    PR_AUTHOR=`whoami`
    while [ "$#" -ge 1 ]; do
        if [ "$1" = "-a" ]; then
            PR_AUTHOR=""
        elif [ "$1" = "-u" ]; then
            shift
            PR_AUTHOR="$1"
        elif [ "$1" = "-o" ]; then
            PR_STATE="OPEN"
        elif [ "$1" = "-n" ]; then
            shift
            PR_MAX="$1"
        else
            echo "Unknown option: $1"
        fi
        shift
    done

    PR_DIR=`mktemp -d /tmp/pr-XXXXXX`
    if [ "$PULL_SCM" = "stash" ]; then
        PULLREQUESTS_FILE="${PR_DIR}/pullrequests"
        $SCRIPT_DIR/nrdp-service/cli.js --mode stash.pr.list --username "${PULL_REQUEST_USER}" --repo "${PULL_REQUEST_REPO}" --project "${PULL_REQUEST_STASH_PROJECT}" --state "$PR_STATE" >"${PULLREQUESTS_FILE}"
        PR_COUNT=$(jq '.size' "${PULLREQUESTS_FILE}")
        for ((p=0; p<$PR_COUNT; p++ )); do
            jq ".values[$p]" "$PULLREQUESTS_FILE" >"${PR_DIR}/pullrequest"
            [ -n "$PR_STATE" ] && [ "$(jq -r '.state' ${PR_DIR}/pullrequest)" != "$PR_STATE" ] && continue
            [ -n "$PR_AUTHOR" ] && jq -r '.author.user.emailAddress' "${PR_DIR}/pullrequest" | grep -vq "$PR_AUTHOR" && continue
            [ "$PR_MAX" = "0" ] && break
            PR_MAX=$((PR_MAX-1))
            #cat "${PR_DIR}/pullrequest" | json_pp
            echo "$(jq -r '.author.user.displayName' ${PR_DIR}/pullrequest):$(jq '.id' ${PR_DIR}/pullrequest): $(jq -r '.links.self[0].href' ${PR_DIR}/pullrequest) [$(jq -r '.state' ${PR_DIR}/pullrequest)]"

            REVIEWERS_COUNT=$(jq -r '.reviewers | length' "${PR_DIR}/pullrequest")
            if [ -n "$REVIEWERS_COUNT" ] && [ "$REVIEWERS_COUNT" -gt 0 ]; then
                echo -n "    "
                for ((r=0; r<$REVIEWERS_COUNT; r++ )); do
                    jq ".reviewers[$r]" "${PR_DIR}/pullrequest" >"${PR_DIR}/reviewer"
                    if [ $(jq -r '.role' "${PR_DIR}/reviewer") == "REVIEWER" ]; then
                        echo -n "$(jq -r '.user.displayName' ${PR_DIR}/reviewer)($(jq -r '.status' ${PR_DIR}/reviewer)) "
                    fi
                done
                echo
            fi
        done
    else
        echo "Need to implement ${PULL_SCM}" >&2
        exit 1
    fi
    rm -rf "$PR_DIR"
elif [ "$MODE" = "submit" ]; then
    FORCE=
    AUTO="${PULL_REQUEST_AUTO_PREFIX}"
    SUBMIT_ARGS=
    PR_NAME=
    while [ "$#" -ge 1 ]; do
        if [ "$1" = "-f" ] || [ "$1" = "--force" ]; then
            FORCE=1
        elif [ "$1" = "-n" ] || [ "$1" = "--name" ]; then
            shift
            PR_NAME="$1"
        elif [ "$1" = "-m" ] || [ "$1" = "--manual" ] || [ "$1" == "--no-auto" ]; then
            AUTO=""
        else
            SUBMIT_ARGS="$SUBMIT_ARGS $1"
        fi
        shift
    done

    BRANCH=
    PUSH_ORIGIN=
    PUSH_BRANCH=
    if [ -n "$PR_NAME" ]; then
        TRACKING=`git config --local submit.tracking`
        [ -z "$TRACKING" ] && TRACKING=`git tracking`
        PUSH_ORIGIN="$(echo $TRACKING | cut -d/ -f1)"
        TRACKING_REMOTE_BRANCH="$(echo $TRACKING | cut -d/ -f2-)"
        PR_BRANCH_NAME=$(echo $PR_NAME | sed -e 's,[^0-9A-Za-z],_,g' 2>/dev/null)
        PUSH_BRANCH="${PULL_REQUEST_PREFIX}/${AUTO}${TRACKING_REMOTE_BRANCH}/${PR_BRANCH_NAME}"
        [ "$FORCE" = "1" ] && git push $PUSH_ORIGIN ":$PUSH_BRANCH" 2>/dev/null
    else
        PUSH_ORIGIN="."
        PUSH_BRANCH="${PULL_REQUEST_PREFIX}/${AUTO}git-pullrequest-submit"
        git push $PUSH_ORIGIN :$PUSH_BRANCH 2>/dev/null
        trap "git push ${PUSH_ORIGIN} :${PUSH_BRANCH}" QUIT EXIT
    fi
    git submit --no-sync-check --src-branch "$PUSH_ORIGIN/$PUSH_BRANCH" --dst-branch "$PUSH_ORIGIN/$PUSH_BRANCH" $SUBMIT_ARGS
else
    echo "Unable to run in mode $MODE"
fi
