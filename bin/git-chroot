#!/bin/bash

repo=
subdir=

while [ -n "$1" ]; do
    case $1 in
        --repo=*)
            repo=`echo $1 | sed -e 's,^.*=,,'`
            ;;
        --subdir=*)
            subdir=`echo $1 | sed -e 's,^.*=,,'`
            ;;
        *)
            echo "Unknown arg $1"
            exit 1
            ;;
        esac
    shift
done

if [ -z "$repo" ]; then
    echo "no --repo=";
    exit 1
fi
if [ -z "$subdir" ]; then
    echo "no --subdir=";
    exit 1
fi

since=
dirname=`basename $repo | sed -e 's,\.git$,,'`

if [ -d "$dirname" ]; then
    cd "$dirname"
    cont=1
else
    mkdir -p "$dirname"
    cd "$dirname"
    git init
    git remote add source $repo
    git fetch source
fi

first=
initial=1
for branch in `git branch -r`; do
    if [ "$cont" ]; then
        git checkout `basename $branch`
        since="--since=`git log -n1 --pretty=format:%ct`"
    else
        git checkout -b `basename $branch`
        first=`git log --pretty=format:%H --reverse $(basename $branch) 2>/dev/null | head -n1`
        [ -n "$first" ] && git reset "$first" --hard
    fi
    echo "git log $since --pretty=format:%H --reverse $branch"
    for sha in `git log $since --pretty=format:%H --reverse $branch`; do
        echo "about to do $sha for branch `basename $branch`"
        # continue
        if [ -n "$initial" ] && [ -z "$cont" ]; then
            initial=
            git reset $sha --hard
        else
            git cherry-pick $sha
            needcommit=
            for i in `git status | grep added.by | awk '{print $NF}'`; do
                needcommit=1
                git add "$i"
            done

            for i in `git status | grep "deleted[: ]" | awk '{print $NF}'`; do
                needcommit=1
                git rm "$i"
            done

            if [ -n "$needcommit" ]; then
                git commit --no-edit
            fi
            if git cherry-pick --abort; then
                echo Aborted commit "$sha"
                continue
            fi
            [ "$cont" ] && [ -z "$first" ] && first="$sha"
        fi

        # git cherry-pick --continue
        # git comit

        # #identify failures
        # git show | grep +++ | grep -v b/$subdir | sed -e 's,^+++ b/,,' | while read i; do
        git show | grep -v "b/$subdir" | grep "^diff --git.*b/"  | sed -e 's,^.* b/,,' | while read i; do
            mkdir -p "$subdir/`dirname $i`";
            git mv -f "$i" "$subdir/$i";
        done

        if ! git commit --amend --no-edit --allow-empty; then
            echo failed 2
            paktc
        fi

        if [ 0 -eq "`git diff HEAD~ | wc -l`" ]; then
            echo "$sha became empty"
            git reset HEAD~1 --hard
            git clean -xfd
        fi


        if [ -n "`find . -type f | grep -v \"\.git\" | grep -v \"./$subdir\"`" ]; then
            # if [ -n "`ls | grep -v mdxlib`" ]; then
            echo mv failed
            paktc
        fi

        # git status | grep added.by.us | awk '{print $NF}' | while read i; do git add $i; done; git commit --amend --no-edit; git rebase --continue

        # git commit --amend --no-edit; git rebase --continue
        # while [ -e /tmp/stop ]; do
        #     echo "stopped"
        #     sleep 5
        # done
        # paktc
    done
    if [ "$cont" ]; then
        if [ -n "$first" ]; then
            git filter-branch -f --env-filter 'export GIT_COMMITTER_DATE="$GIT_AUTHOR_DATE"' ${first}~..HEAD
        fi
    else
        git filter-branch -f --env-filter 'export GIT_COMMITTER_DATE="$GIT_AUTHOR_DATE"' HEAD
    fi
    git clean -xfd
done

