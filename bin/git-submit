#!/bin/bash

if test "x$GIT_SEQUENCE_EDITOR" = "x$0" ; then
    # The script was launched as an $EDITOR from git rebase -i.
    # Modify the pick line to an edit line and just exit.
    rm -f /tmp/commits$$
    touch /tmp/commits$$
    if [ "$SUBMIT_CHANGES_MODE" = "keep" ]; then
        for change in $SUBMIT_CHANGES; do
            echo "pick $change" >> /tmp/commits$$
        done
    elif [ "$SUBMIT_CHANGES_MODE" = "delete" ]; then
        grep "^pick " "$1" | while read line; do
            found=
            for change in $SUBMIT_CHANGES; do
                if echo $line | grep --quiet "^pick $change"; then
                    [ "$SUBMIT_CHANGES_MODE" = "delete" ] && echo "drop $change" >> /tmp/commits$$
                    found=1
                    break
                fi
            done
            if [ -z "$found" ]; then
                echo $line >> /tmp/commits$$
            fi
        done
    fi
    cat /tmp/commits$$ > "$1"
    rm -f /tmp/commits$$
    exit 0
fi

GITHOOKSDIR=`git rev-parse --git-path hooks 2>/dev/null`
[ -z "$GITHOOKSDIR" ] && GITHOOKSDIR="$(git rev-parse --git-dir)/hooks"
CURRENTBRANCH=`git branch | grep '^\*' | awk '{print $2}' -`
if test "$CURRENTBRANCH" = "(no" ; then
    echo "Not on a valid branch - please check out the correct branch"
    exit 1
fi

run_hook() {
    [ -d "$GITHOOKSDIR" ] || return 0
    local HOOK_SCRIPT="${GITHOOKSDIR}/${1}"
    #echo "Running hook: ${HOOK_SCRIPT}"
    if [ -x "$HOOK_SCRIPT" ]; then
        shift
        $HOOK_SCRIPT "$@" || return 1
    fi
    return 0
}

TRACKING=`git config --local submit.tracking`
[ -z "$TRACKING" ] && TRACKING=`git tracking`

if [ "$1" = "tracking" ]; then
    if [ -n "$2" ]; then
        git config --local submit.tracking "$2"
    else
        echo "$TRACKING"
    fi
elif [ "$1" = "changes" ] || [ "$1" = "list" ]; then
    BRANCH=""
    while [ "$#" -ge 1 ]; do
        if [ "$1" = "--branch" ]; then
            shift
            BRANCH="$1"
        fi
        shift
    done
    [ -z "$BRANCH" ] && BRANCH="$TRACKING"

    for change in `git cherry $BRANCH | grep '^+ ' | sed 's,^+,,g'`; do
        [ "$change" = "+" ] && continue
        NOTES=
        git ignore-commit check "$change" >/dev/null && NOTES="$NOTES [IGNORED]"
        echo "$(git changes --no-ignores --max-count=1 $change)$NOTES"
    done
else
    PR=""
    BRANCH=""
    IN_CHANGES=
    DELETE=no
    FORCE=
    REPLACE=no
    PUSH=yes
    SYNC_CHECK=yes
    AUTOSTASH=
    [ "`git config submit.autostash`" != "false" ] && AUTOSTASH="yes"
    while [ "$#" -ge 1 ]; do
        if [ "$1" = "-n" ] || [ "$1" = "--dry-run" ]; then
            PUSH=no
        elif [ "$1" = "-f" ] || [ "$1" = "--force" ];  then
            FORCE="-f"
        elif [ "$1" = "--force-with-lease" ];  then
            FORCE="--force-with-lease"
        elif [ "$1" = "-d" ]; then
            DELETE=yes
        elif [ "$1" = "--branch" ]; then
            shift
            BRANCH="$1"
        elif [ "$1" = "--pr" ] || [ "$1" = "--pull-request" ]; then
            shift
            PR="$1"
        elif [ "$1" = "--replace" ] || [ "$1" = "-r" ]; then
            REPLACE=yes
        elif [ "$1" = "--autostash" ]; then
            AUTOSTASH="yes"
        elif [ "$1" = "--no-sync-check" ]; then
            SYNC_CHECK="no"
        elif [ "$1" = "--no-hooks" ]; then
            GITHOOKSDIR=""
        elif [ "$1" = "-a" ]; then
            for change in `git cherry "$TRACKING" | grep '^+ ' | sed 's,^+,,g'`; do
                IN_CHANGES="$IN_CHANGES `echo $change | awk '{print $1}'`"
            done
        elif [ "$1" = "--" ]; then
            shift
            IN_CHANGES="$IN_CHANGES $@"
            break
        elif `echo $1 | grep --quiet -- "^-"`; then
            echo "git-submit: Unknown option $1" >&2
            exit 1
        else
            IN_CHANGES="$IN_CHANGES $1"
        fi
        shift
    done
    if [ -n "$PR" ]; then
        PR_ARGS=""
        [ -n "$PR" ] && PR_ARGS="$PR_ARGS --name $PR"
        [ "$REPLACE" = "yes" ] && PR_ARGS="$PR_ARGS --force"
        git pullrequest submit ${PR_ARGS} ${IN_CHANGES}
        exit 0
    elif [ "$REPLACE" = "yes" ]; then
        echo "--replace only works with --pr"
        exit 1
    fi
    autostash() {
        if [ -n "$AUTOSTASH" ] && [ -n "`git status -s -uno 2>/dev/null`" ]; then
            ignore_marker=`git ignore-commit marker 2>/dev/null`
            git commit -a -m "${ignore_marker}git-submit" --allow-empty
            return 0
        fi
        return 1
    }
    if [ "$SYNC_CHECK" = "yes" ] && [ -n "$BRANCH" ] && ! git sync --check "$BRANCH" >/dev/null 2>&1; then
        echo "You need to sync first! [$BRANCH]" >&2
        exit 1
    fi

    if [ -z "$BRANCH" ]; then
        BRANCH="$TRACKING"
    fi
    if [ -z "$BRANCH" ]; then
        echo "No branch to push to!"
        exit 1
    fi
    PUSH_ORIGIN="."
    PUSH_BRANCH="$BRANCH"
    if echo "$PUSH_BRANCH" | grep -q "/"; then
        PUSH_ORIGIN=`echo $PUSH_BRANCH | cut -d/ -f1`
        PUSH_BRANCH=`echo $PUSH_BRANCH | cut -d/ -f2-`
    fi

    COMMON_SHA1_BRANCH="$BRANCH"
    git rev-parse "$COMMON_SHA1_BRANCH" >/dev/null 2>&1 || COMMON_SHA1_BRANCH="$TRACKING"
    COMMON_SHA1=`git merge-base HEAD $COMMON_SHA1_BRANCH`

    if [ -z "$IN_CHANGES" ]; then
        SUBMIT_ARGS=""
        #SUBMIT_ARGS="${SUBMIT_ARGS} --no-hooks"
        [ -n "$FORCE" ] && SUBMIT_ARGS="$SUBMIT_ARGS $FORCE"
        [ "$DELETE" = "yes" ] && SUBMIT_ARGS="$SUBMIT_ARGS -d"
        [ -n "$BRANCH" ] && SUBMIT_ARGS="$SUBMIT_ARGS --branch ${BRANCH}"
        [ "$SYNC_CHECK" != "yes" ] && SUBMIT_ARGS="$SUBMIT_ARGS --no-sync-check"
        which git-choose-show-change >/dev/null 2>&1 && git-choose-show-change --filter "$BRANCH" --reverse --command "submit ${SUBMIT_ARGS}" "${TRACKING}..HEAD"
        exit 0
    else
        RESOLVED_CHANGES=""
        for change in $IN_CHANGES; do
            SHA1=`git rev-parse "$change"`
            RESOLVED_CHANGES="$RESOLVED_CHANGES $SHA1"
        done
        IN_CHANGES="$RESOLVED_CHANGES"
    fi

    AUTOSTASHED=0
    autostash && AUTOSTASHED=$((AUTOSTASHED+1))

    CHANGES=""
    RESET_HEAD=`git rev-parse HEAD`
    for change in $IN_CHANGES; do
        SHA1=`git rev-parse --short "$change"`
        if ! git merge-base "$SHA1" HEAD >/dev/null 2>/dev/null ; then
            echo "$SHA1 does not appear to be in the current branch"
            continue
        elif git ignore-commit check "$SHA1" >/dev/null; then
            echo "$SHA1 is marked to ignore!"
            continue
        fi
        if git rev-parse "$BRANCH" >/dev/null 2>&1; then
            FILTER_CHERRY=$(git cherry "$BRANCH" "${SHA1}" "${SHA1}~" 2>/dev/null)
            if [ -z "${FILTER_CHERRY}" ] || echo "$FILTER_CHERRY" | grep -q '^-'; then
                echo "Filtered: ${SHA1}" >&2
                continue
            fi
        fi
        CHANGES="$CHANGES $SHA1"
    done

    export SUBMIT_CHANGES="$CHANGES"
    if [ -z "$FORCE" ] && git rev-parse "$BRANCH" >/dev/null 2>&1; then
        for h in $(git log --reverse --pretty='%h' "${COMMON_SHA1}..${BRANCH}"); do
            export SUBMIT_CHANGES="$h $SUBMIT_CHANGES"
        done
    fi
    export SUBMIT_CHANGES_MODE="keep"
    export GIT_SEQUENCE_EDITOR="$0"
    echo "Keep ${SUBMIT_CHANGES} onto ${COMMON_SHA1}"
    #exit 0
    if ! git rebase --keep-empty -i "${COMMON_SHA1}"; then
        echo "Git failed"
        exit 1
    fi
    NEW_SHA1=`git rev-parse HEAD`
    if [ -z "$NEW_SHA1" ]; then
        echo "Nothing to push"
        DELETE="no"
    else
        PUSH_ARGS="$PUSH_ORIGIN $NEW_SHA1:refs/heads/$PUSH_BRANCH"
        [ -n "$FORCE" ] && PUSH_ARGS="$FORCE ${PUSH_ARGS}"
        echo "Push: git push $PUSH_ARGS"

        if [ "$PUSH" = "yes" ] && run_hook "pre-submit" "$NEW_SHA1" "$BRANCH"; then
            if git push ${PUSH_ARGS}; then
                run_hook "post-submit" "$COMMON_SHA1" "$BRANCH" "$TRACKING"
            else
                DELETE="no"
            fi
        fi
    fi
    git reset --hard "${RESET_HEAD}"
    if [ "$DELETE" = "yes" ] && [ "$PUSH" = "yes" ]; then
        export SUBMIT_CHANGES="$CHANGES"
        export SUBMIT_CHANGES_MODE="delete"
        echo "Delete ${SUBMIT_CHANGES} from ${COMMON_SHA1}"
        git rebase -i "${COMMON_SHA1}" >/dev/null
    fi
    [ "$AUTOSTASHED" -gt 0 ] && git reset "HEAD~${AUTOSTASHED}"
fi
exit 0
