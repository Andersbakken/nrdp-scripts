#!/bin/sh

if test "x$EDITOR" = "x$0" ; then
    # The script was launched as an $EDITOR from git rebase -i.
    # Modify the pick line to an edit line and just exit.
    sed -e '1,$s/^pick '"$SHORT_SHA1 /edit $SHORT_SHA1 /" < "$1" >/tmp/editcommit$$
    mv /tmp/editcommit$$ "$1"
    exit 0
fi

GITCOMMIT=
P4COMMIT=
MESSAGE=
TEST=
JIRA=

INTERACTIVE=no
COMMENT=maybe
RESOLVE=maybe
CREATE=no
REWORD=no

if ! which jira >/dev/null 2>&1; then
   echo "Cannot find jira commandline!"
   exit 2
fi

usage() {
  echo "Usage: $1 [args] [git-commit]"
  echo
  echo "Args:"
  echo " --comment, -c <msg> : Send <msg> instead of calculated from commit message"
  echo " --interactive, -i   : Ask before commenting/resolving"
  echo " --resolve, -r       : Resolve JIRA ticket as well was commenting"
  echo " --jira, -j <ticket> : Use <ticket> instead of calculated from commit message"
  echo " --p4 <p4-commit>    : Use <p4-commit> instead of calculating from commit message"
  echo
  echo "If no [git-commit] is provided then the last commit from $(whoami) will be used instead"
  exit 3
}

while [ "$#" -gt 0 ]; do
   OPT="$1"
   case $OPT in
   --test|-test) TEST="echo" ;;
   --create|-create) CREATE=yes; REWORD=yes ;;
   --move|-move|--reword|-reword) REWORD=yes ;;
   --comment|-c|-comment) COMMENT=yes ;;
   --interactive|-i) INTERACTIVE=yes ;;
   --resolve|-r|-resolve) RESOLVE=yes; COMMENT=yes ;;
   --message|-m) shift; MESSAGE="$1"; COMMENT=yes ;;
   --jira|-j) shift; JIRA="$1" ;;
   --p4|-p4) shift; P4COMMIT="$1" ;;
   -help) usage $0 ;;
   *)
      if [ -z "$GITCOMMIT" ]; then
          GITCOMMIT="$1"
      elif [ -z "$P4COMMIT" ]; then
          P4COMMIT="$1"
      else
          usage $0
      fi ;;
   esac
   shift
done

[ -z "$GITCOMMIT" ] && GITCOMMIT=`git log --author=$(whoami) -n1 --pretty=format:"%h"`
[ -z "$GITCOMMIT" ] && GITCOMMIT="HEAD"
[ -z "$P4COMMIT" ] && P4COMMIT=`git p4 change --git "$GITCOMMIT" 2>/dev/null | awk '{print $4}'`

DESCRIPTION=
[ -n "$P4COMMIT" ] && DESCRIPTION=`p4 describe -s $P4COMMIT | grep $'^\t' | sed "s,^\s*,,g"`
[ -z "$DESCRIPTION" ] && DESCRIPTION=`git show --quiet --pretty=format':%s' "$GITCOMMIT"`
echo "Git: $GITCOMMIT ($P4COMMIT)"

if [ -z "$JIRA" ] && [ "$REWORD" = "no" ]; then
    if [ -z "$DESCRIPTION" ]; then
        echo "Description not found!"
    elif echo "$DESCRIPTION" | grep '^\[[^ ]\+-[0-9]\+\] ' >/dev/null 2>&1; then
        JIRA=`echo "$DESCRIPTION" | sed 's,^\[\([^ ]\+-[0-9]\+\)\].*,\1,g'`
    elif echo "$DESCRIPTION" | grep '^[^ ]\+-[0-9]\+: ' >/dev/null 2>&1; then
        JIRA=`echo "$DESCRIPTION" | sed 's,^\([^ ]\+-[0-9]\+\): .*,\1,g'`
    fi
fi

if [ -n "$TEST" ] || true; then
    echo "Description: $DESCRIPTION"
    echo "Jira: $JIRA"
fi

if [ "$CREATE" = "yes" ]; then
  #project
  JIRA_PROJECT=""
  [ -n "$JIRA" ] && JIRA_PROJECT=`echo $JIRA | cut -d'-' -f1`
  if [ -z "$JIRA_PROJECT" ]; then
      echo "=================================================="
      echo -n "Project: "
      read JIRA_PROJECT
  fi
  if [ -z "$JIRA_PROJECT" ]; then
      echo "Must supply a PROJECT!"
      exit 1
  fi
  #summary
  echo "=================================================="
  echo "Default Summary: $DESCRIPTION"
  echo -n "Summary: "
  read JIRA_SUMMARY
  [ -z "$JIRA_SUMMARY" ] && JIRA_SUMMARY="$DESCRIPTION"
  #description
  echo "=================================================="
  echo -n "Description: "
  read JIRA_DESCRIPTION

  JIRA=
  if [ -n "$TEST" ]; then
      $TEST jira create -p \"$JIRA_PROJECT\" -s \"$JIRA_SUMMARY\" -d \"$JIRA_DESCRIPTION\" -e \"\"
  else
      JIRA_CREATED=`jira create -p "$JIRA_PROJECT" -s "$JIRA_SUMMARY" -d "$JIRA_DESCRIPTION" -e "" | tail -1`
      if echo "$JIRA_CREATED" | grep 'Created issue' >/dev/null 2>&1; then
          JIRA=`echo $JIRA_CREATED | sed "s,^Created issue ,,"`
      fi
  fi
  echo "Created: $JIRA"
fi

if [ "$REWORD" = "yes" ] && [ -n "$P4COMMIT" ]; then
  echo "Cannot reword as this commit has been pushed into P4!"
elif [ "$REWORD" = "yes" ]; then
  DESCRIPTION_FILE=`mktemp`
  if [ -z "$JIRA" ]; then
      [ -n "$JIRA_MYBUGS" ] && $TEST jira report "$JIRA_MYBUGS"
      echo -n "JIRA? "
      read JIRA
      echo "[$JIRA] $DESCRIPTION" | sed -e "s,^ *,,g" >"$DESCRIPTION_FILE"
  fi
  if [ -z "$JIRA" ] || echo "$DESCRIPTION" | grep "$JIRA" >/dev/null 2>&1; then
      DESCRIPTION_FILE=
  elif echo "$DESCRIPTION" | grep '^\[[^ ]\+-[0-9]\+\] ' >/dev/null 2>&1; then
      echo "$DESCRIPTION" | sed "s,^\[\([^ ]\+-[0-9]\+\)\],[$JIRA],g" >"$DESCRIPTION_FILE"
  elif echo "$DESCRIPTION" | grep '^[^ ]\+-[0-9]\+: ' >/dev/null 2>&1; then
      echo "$DESCRIPTION" | sed "s,^\([^ ]\+-[0-9]\+\): ,$JIRA: ,g" >"$DESCRIPTION_FILE"
  else
      echo "[$JIRA] $DESCRIPTION" | sed -e "s,^ *,,g" >"$DESCRIPTION_FILE"
  fi
  if [ -n "$DESCRIPTION_FILE" ]; then
      [ -n "$TEST" ] && cat "$DESCRIPTION_FILE"

      OLDEDITOR="$EDITOR"
      export EDITOR="$0"
      export SHORT_SHA1=`git rev-parse --short "$GITCOMMIT"`
      if ! $TEST git rebase --preserve-merges -i "${GITCOMMIT}^"; then
          echo "Unable to rebase for reword!"
          return 1
      fi
      export EDITOR="$OLDEDITOR"

      [ -n "$DESCRIPTION_FILE" ] && "$EDITOR" "$DESCRIPTION_FILE"
      DESCRIPTION=`cat "$DESCRIPTION_FILE"`
      if [ -z "$DESCRIPTION" ]; then
          echo "Aborted with empty description!"
      else
          $TEST git commit --amend -F "$DESCRIPTION_FILE"
      fi
      $TEST git rebase --continue
  fi
fi

if [ -n "$P4COMMIT" ] && [ -n "$JIRA" ]; then
  $TEST jira cat "$JIRA"
  if [ "$INTERACTIVE" = "yes" ]; then
      if [ "$COMMENT" = "maybe" ]; then
          COMMENT=no
          echo -n "Comment? "
          read input
          if [ "$input" = "r" ]; then
              COMMENT=yes
              [ "$RESOLVE" = "maybe" ] && RESOLVE=yes
          elif [ "$input" = "y" ] || [ "$input" = "yes" ]; then
              COMMENT=yes
          fi
      fi
      if [ "$RESOLVE" = "maybe" ]; then
          RESOLVE=no
          echo -n "Resolve? "
          read input
          if [ "$input" = "y" ] || [ "$input" = "yes" ]; then
              RESOLVE=yes
          fi
      fi
  fi
  if [ "$COMMENT" = "yes" ]; then
    if [ -n "$MESSAGE" ]; then
      $TEST jira comment "$JIRA" "$MESSAGE"
    elif [ -n "$P4COMMIT" ] && ! jira comments "$JIRA" | grep $P4COMMIT >/dev/null 2>&1; then
      $TEST jira comment "$JIRA" "[Changelist: $P4COMMIT|http://perforce.netflix.com/$P4COMMIT?ac=10] $DESCRIPTION"
    fi
  fi
  if [ "$RESOLVE" = "yes" ]; then
    $TEST jira resolve "$JIRA"
  fi
fi
exit 0
