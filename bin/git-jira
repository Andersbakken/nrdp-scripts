#!/bin/bash

if test "x$EDITOR" = "x$0" ; then
    # The script was launched as an $EDITOR from git rebase -i.
    # Modify the pick line to an edit line and just exit.
    sed -e '1,$s/^pick '"$SHORT_SHA1 /edit $SHORT_SHA1 /" < "$1" >/tmp/editcommit$$
    mv /tmp/editcommit$$ "$1"
    exit 0
fi

COMMITS=

INTERACTIVE=yes
COMMENT=maybe
RESOLVE=maybe
SCRIPT_DIR="$(dirname ${BASH_SOURCE[0]} )"

usage() {
    echo "Usage: $1 [args] [commits]"
    echo
    echo "Args:"
    echo " --comment, -c       : Comment <msg> instead of calculated from commit message"
    echo " --interactive, -i   : Ask before commenting/resolving (default yes)"
    echo " --no-interactive    : Don't ask before commenting/resolving"
    echo " --resolve, -r       : Resolve"
    echo
    echo "If no [commits] are provided then the last commit from $(whoami) will be used instead"
    exit 3
}

while [ "$#" -gt 0 ]; do
    OPT="$1"
    case $OPT in
        --no-comment|-no-comment) COMMENT=no ;;
        --comment|-c|-comment) COMMENT=yes ;;
        --no-interactive) INTERACTIVE=no ;;
        --interactive|-i) INTERACTIVE=yes ;;
        --no-resolve|-no-resolve) RESOLVE=no; COMMENT=no ;;
        --resolve|-r|-resolve) RESOLVE=yes; COMMENT=yes ;;
        --help|-help|-h) usage $0 ;;
        *)
            if echo $1 | grep -q '\.\.'; then
                COMMITS=`git log --pretty=format:%h $1`
            else
                COMMITS="$COMMITS $1"
            fi
            ;;
    esac
    shift
done

[ -z "$COMMITS" ] && COMMITS=`git log --author=$(whoami) -n1 --pretty=format:%h`
[ -z "$COMMITS" ] && COMMITS="HEAD"
for COMMIT in $COMMITS; do
    COMMIT=`git rev-parse --short $COMMIT`

    ISSUES=""
    DESCRIPTION=`git log -1 --pretty=format':%s' "$COMMIT"`
    if [ -n "$DESCRIPTION" ]; then
        ISSUES=`git notes --ref git-jira show "$COMMIT" 2>/dev/null`
        [ -z "$ISSUES" ] && ISSUES=`echo "$DESCRIPTION" | grep -o '^\[[^ ]\+-[0-9]\+\] '`
        [ -z "$ISSUES" ] && ISSUES=`echo "$DESCRIPTION" | grep -o '^[^ ]\+-[0-9]\+: '`
    fi
    for ISSUE in $ISSUES; do
        ISSUE=`echo $ISSUE | sed "s,[^a-zA-Z0-9-],,g"`
        if [ "$INTERACTIVE" = "yes" ]; then
            if [ "$COMMENT" = "maybe" ]; then
                echo -n "Comment JIRA? "
                read input
                if [ "$input" = "r" ]; then
                    COMMENT=yes
                    [ "$RESOLVE" = "maybe" ] && RESOLVE=yes
                elif [ "$input" = "y" ] || [ "$input" = "yes" ]; then
                    COMMENT=yes
                fi
            fi
            if [ "$RESOLVE" = "maybe" ]; then
                RESOLVE=no
                echo -n "Resolve JIRA? "
                read input
                if [ "$input" = "y" ] || [ "$input" = "yes" ]; then
                    RESOLVE=yes
                elif [ "$input" = "n" ] || [ "$input" = "no" ]; then
                    RESOLVE=no
                else
                    RESOLVE=yes
                    DESCRIPTION="$input"
                fi
            fi
        fi

        echo "Git: $COMMIT($ISSUE)"
        MESSAGE="[Commit: $COMMIT|https://stash.corp.netflix.com/projects/NRDP/repos/nrdp/commits/$COMMIT] $DESCRIPTION"
        JIRA_CMD="$SCRIPT_DIR/nrdp-service/cli.js --mode jira --issue $ISSUE"
        [ -n "$JIRA_USERNAME" ] && JIRA_CMD="$JIRA_CMD --username ${JIRA_USERNAME}"
        [ "$COMMENT" = "yes" ] && JIRA_CMD="$JIRA_CMD --comment \"$MESSAGE\""
        [ "$RESOLVE" = "yes" ] && JIRA_CMD="$JIRA_CMD --resolve"
        #echo "${JIRA_CMD}"
        eval ${JIRA_CMD}
    done
done
exit 0
