#!/bin/sh

ROOT=$(git rev-parse --show-toplevel) 2>/dev/null
if [ -z "$ROOT" ]; then
    echo "Must be run from git root!"
    exit 1
fi

MARKER=`git config ignore.marker`
[ -z "$MARKER" ] && MARKER="WIP: "

shouldIgnore() {
    local change="$1"
    echo "$change" | grep -q '\.\.' || change="${change}~1..${change}"
    commits=`git rev-list --grep "^${MARKER}" "$change"`
    for commit in $commits; do
        echo "IGNORE: $commit"
    done
    [ -n "$commits" ] && return 0
    return 1
}

if [ "$1" = "list" ] || [ "$#" = "0" ]; then
    TRACKING=
    [ "$1" = "list" ] && TRACKING="$2"
    [ -z "$TRACKING" ] && TRACKING=`git tracking`
    for change in `git cherry $TRACKING | grep '^+ ' | sed 's,^+,,g' | tac`; do
        [ "$change" = "+" ] && continue
        shouldIgnore $change >/dev/null && echo "$(git changes --max-count=1 $change)"
    done
elif [ "$1" = "marker" ]; then
    if [ -n "$2" ]; then
        MARKER="$2"
        git config ignore.marker "${MARKER}"
    fi
    echo "${MARKER}"
elif [ "$1" = "remote" ]; then
    REMOTES=`git config ignore.remote`
    if [ "$2" = "add" ]; then
        if [ -z "$REMOTES" ]; then
            git config ignore.remote "$3"
        else
            git config ignore.remote "$REMOTES $3"
        fi
    elif [ "$2" = "rm" ]; then
        TMP_REMOTES=
        for remote in $REMOTES; do
            [ "$remote" = "$3" ] || TMP_REMOTES="$TMP_REMOTES $remote"
        done
        git config ignore.remote "$TMP_REMOTES"
    elif [ "$2" = "check" ]; then
        for remote in $REMOTES; do
            [ "$remote" = "$3" ] && exit 0
        done
        exit 1
    elif [ "$2" = "push" ]; then
        CHECK=0
        for remote in $REMOTES; do
            if [ "$remote" = "$3" ]; then
                CHECK="1"
                break
            fi
        done
        if [ "$CHECK" = "1" ]; then
            z40=0000000000000000000000000000000000000000
            while read local_ref local_sha remote_ref remote_sha; do
                [ "$local_sha" = $z40 ] && continue
                if [ "$remote_sha" = $z40 ]; then # New branch, examine all commits
                    range="$local_sha"
                else # Update to existing branch, examine new commits
                    range="${remote_sha}..${local_sha}"
                fi
                if git ignore check "$range"; then
                    echo "Ignored commit found in $local_ref. Aborted."
                    exit 1
                fi
            done
        fi
    else
        for remote in $REMOTES; do
            echo "$remote"
        done
    fi
    exit 0
elif [ "$1" = "check" ]; then
    shouldIgnore "$2" && exit 0
    exit 1
else
    if [ "$1" = "toggle" ] || [ "$1" = "set" ] || [ "$1" = "unset" ]; then
        mode="$1"
        shift
    else
        mode="toggle"
    fi
    TRACKING=
    [ -z "$TRACKING" ] && TRACKING=`git tracking`

    changes="$@"
    [ -z "$changes" ] && changes="HEAD"
    for change in $changes; do
        change=`git rev-parse $change`
        if [ -z "$change" ]; then
            echo "UNKNOWN: $change"
            continue
        fi
        change_mode="$mode"
        if [ "$mode" = "toggle" ]; then
            if shouldIgnore $change >/dev/null; then
                change_mode="unset"
            else
                change_mode="set"
            fi
        elif [ "$mode" = "set" ]; then
            shouldIgnore $change >/dev/null && continue
        elif [ "$mode" = "unset" ]; then
            shouldIgnore $change >/dev/null || continue
        fi

        if [ `git merge-base "$change" "$TRACKING" 2>/dev/null` = "$change" ]; then
            echo "PUSHED: $change"
            continue
        fi

        if [ "$change_mode" = "set" ]; then
            FILTER="/bin/echo -n '$MARKER'; cat"
        else
            FILTER="cat | sed 's,^${MARKER},,'"
        fi
        stashed=
        if [ "`git config ignore.autostash`" != "false" ] && [ -n "`git status -s -uno 2>/dev/null`" ]; then
            stashed=1
            git commit -a -m "${MARKER}git-ignore" --allow-empty
        fi
        (cd "$ROOT" && git filter-branch -f --msg-filter "if [ \"\$GIT_COMMIT\" = '$change' ]; then $FILTER; else cat; fi" "${change}~..HEAD")
        if [ -n "$stashed" ]; then
            git reset HEAD~
        fi
    done
fi
