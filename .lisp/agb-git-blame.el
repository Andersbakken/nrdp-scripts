(require 'git)
(require 'diff-mode)
(defvar agb-git-blame-mode-hook nil)
(defvar agb-git-blame-last-temp-buffer nil)
(defvar agb-git-blame-last-file nil)
(defvar agb-git-blame-commit-chain nil)
(defvar agb-git-blame-last-blame-buffer nil)
(defvar agb-git-blame-showing-smaller nil)
(defcustom agb-git-blame-reuse-buffers
  t
  "Whether to reuse temp buffers for agb-git-blame"
  :group 'rtags
  :type 'boolean)

(defcustom agb-git-blame-use-relative-date
  t
  "Whether to use relative dates for agb-git-blame"
  :group 'rtags
  :type 'boolean)

(defvar agb-git-blame-mode-map nil)
;; assign command to keys
(setq agb-git-blame-mode-map (make-sparse-keymap))

(define-key agb-git-blame-mode-map (kbd "q") (function bury-buffer))
(define-key agb-git-blame-mode-map (kbd "p") (function agb-git-reblame-for-previous-revision))
(define-key agb-git-blame-mode-map (kbd "n") (function agb-git-reblame-pop))
(define-key agb-git-blame-mode-map (kbd "=") (function agb-git-blame-show-diff))
(define-key agb-git-blame-mode-map (kbd "+") (function agb-git-blame-show-diff-other-window))
(define-key agb-git-blame-mode-map (kbd "s") (function agb-git-blame-toggle-smaller))
(define-key agb-git-blame-mode-map (kbd "o") (function agb-git-blame-show-revision))
(define-key agb-git-blame-mode-map (kbd "RET") (function agb-git-blame-show-revision))
(define-key agb-git-blame-mode-map (kbd "ENTER") (function agb-git-blame-show-revision))

(define-derived-mode agb-git-blame-mode fundamental-mode
  ;; (setq font-lock-defaults '(agb-git-blame-faces))
  (setq mode-name "agb-git-blame")
  (use-local-map agb-git-blame-mode-map)
  (run-hooks 'agb-git-blame-mode-hook)
  (setq buffer-read-only t)
  )

(defun agb-git-blame(&optional revision)
  (interactive)
  (unless revision (setq revision "HEAD"))
  (let* ((buffer-name (if (buffer-file-name) (buffer-file-name) (agb-git-blame-filename)))
         (buf (get-buffer-create (format "*%s - Blame - %s*" buffer-name revision)))
         (line (buffer-substring (point-at-bol) (point-at-eol)))
         (lineno (line-number-at-pos)))
    (if (and agb-git-blame-reuse-buffers
             agb-git-blame-last-blame-buffer
             (not (eq buf agb-git-blame-last-blame-buffer)))
        (kill-buffer agb-git-blame-last-blame-buffer))
    (setq agb-git-blame-last-blame-buffer buf)
    (if (string-match "[0-9][0-9]:[0-9][0-9]:[0-9] [0-9- ]* [0-9]+) \\(.*\\)$" line)
        (setq line (match-string 1 line)))
    (if (or (string= revision "HEAD") (not (string= buffer-name agb-git-blame-last-file)))
        (setq agb-git-blame-last-file buffer-name
              agb-git-blame-commit-chain nil))
    (if (not (member revision agb-git-blame-commit-chain))
        (push revision agb-git-blame-commit-chain))
    (switch-to-buffer buf)
    (setq buffer-read-only nil)
    (erase-buffer)

    (let ((args (list revision "--" buffer-name)))
      (if agb-git-blame-use-relative-date (push "--date=relative" args))
      (if agb-git-blame-showing-smaller (push "-s" args))
      (push "blame" args)
      (apply #'call-process "git" nil (current-buffer) nil args))
    (goto-char (point-min))
    (if (looking-at "fatal")
        (progn
          (if (> (length agb-git-blame-commit-chain) 1)
              (agb-git-blame (nth 1 agb-git-blame-commit-chain)))
          (message "No such commit"))
      (let ((longest 0)
            (paren)
            (rx " +[0-9]+) "))
        ;; (while (not (eobp))
        ;;   (save-excursion
        ;;     (let ((idx (search-forward-regexp rx (point-at-eol) t)))
        ;;       (when idx
        ;;         ;; (message "Got %d %d %d %d - %d" idx (point-at-bol) (point-at-eol) (point-max) (match-beginning 0))
        ;;         (setq idx (- (match-beginning 0) (point-at-bol)))
        ;;         (if (> idx longest)
        ;;             (setq longest idx))
        ;;         (unless paren
        ;;           (setq paren (- (match-end 0) 2))
        ;;         )
        ;;       )
        ;;     )
        ;;   (next-line))
        ;;   ;; (message "start %d end %d" longest paren)
        ;;   (goto-char (point-min))
        ;;   (while (not (eobp))
        ;;     (let ((pos (+ (point-at-bol) longest)))
        ;;       (when (< pos (point-max))
        ;;         (goto-char pos)
        ;;         (delete-char
        ;;       (let ((idx (search-forward-regexp rx (point-at-eol) t)))
        ;;         (when idx
        ;;           ;; (message "Got %d %d %d %d - %d" idx (point-at-bol) (point-at-eol) (point-max) (match-beginning 0))
        ;;           (setq idx (- (match-beginning 0) (point-at-bol)))
        ;;           (if (> idx longest)
        ;;               (setq longest idx))
        ;;           (unless paren
        ;;             (setq paren (- (match-end 0) 2))
        ;;             )
        ;;           )
        ;;         )
        ;;       (next-line))
          
        (if (search-forward line nil t)
            (beginning-of-line)
          (if (< lineno (line-number-at-pos (point-max)))
              (goto-line lineno)))
        (agb-git-blame-mode)))
    (setq buffer-read-only t)
    )
  )

(defun agb-git-reblame-for-previous-revision ()
  (interactive)
  (let ((commit (agb-git-blame-current-commit)))
    (if commit
        (agb-git-blame (concat commit "~")))
    )
  )

(defun agb-git-reblame-pop ()
  (interactive)
  (when (and (agb-git-blame-filename)
             (> (length agb-git-blame-commit-chain) 1))
    (setq agb-git-blame-commit-chain (cdr agb-git-blame-commit-chain))
    (agb-git-blame (car agb-git-blame-commit-chain))))

(defun agb-git-blame-filename ()
  (if (string-match "\\*\\(.*\\) - Blame - [A-Za-z0-9~]*\\*" (buffer-name))
      (match-string 1 (buffer-name)))
  )

(defun agb-git-blame-current-commit()
  (save-excursion
    (beginning-of-line)
    (if (looking-at "^\\([0-9a-f][0-9a-f][0-9a-f][0-9a-f][0-9a-f][0-9a-f][0-9a-f][0-9a-f]\\) ")
        (match-string 1))))

(defun agb-git-blame-show-diff (&optional otherwindow)
  (interactive "P")
  (let ((commit (agb-git-blame-current-commit)))
    (if commit
        (let ((bufname (format "*%s - %s*" (agb-git-blame-filename) commit)))
          (if (get-buffer bufname)
              (kill-buffer bufname))
          (if (and agb-git-blame-reuse-buffers agb-git-blame-last-temp-buffer)
              (kill-buffer agb-git-blame-last-temp-buffer))
          (if (not otherwindow)
              (switch-to-buffer (get-buffer-create bufname))
            (progn
              (if (= 1 (length (window-list)))
                  (split-window-vertically))
              (switch-to-buffer-other-window (get-buffer-create bufname))))
          (setq agb-git-blame-last-temp-buffer (current-buffer))
          (call-process "git" nil (current-buffer) nil "show" commit)
          (goto-char (point-min))
          (diff-mode)
          (setq buffer-read-only t))
      )
    )
  )

(defun agb-git-blame-show-diff-other-window()
  (interactive)
  (agb-git-blame-show-diff t))

(defvar agb-git-blame-show-revision-keymap (make-sparse-keymap))
(define-key agb-git-blame-show-revision-keymap (kbd "q") 'bury-buffer)

(defun agb-git-blame-show-revision ()
  (interactive)
  (let ((commit (agb-git-blame-current-commit))
        (gitroot (git-root-dir)))
    (if (and commit gitroot)
        (let* ((fn (agb-git-blame-filename))
               (bufname (format "*%s@%s*" fn commit)))
          (if (get-buffer bufname)
              (kill-buffer bufname))
          (if (and agb-git-blame-reuse-buffers agb-git-blame-last-temp-buffer)
              (kill-buffer agb-git-blame-last-temp-buffer))
          (switch-to-buffer (get-buffer-create bufname))
          (setq agb-git-blame-last-temp-buffer (current-buffer))
          (let ((gitfn fn))
            (if (string= gitroot (substring gitfn 0 (length gitroot)))
                (setq gitfn (substring gitfn (length gitroot))))
            (call-process "git" nil (current-buffer) nil "show" (concat commit ":" gitfn)))
          (setq buffer-file-name fn)
          (set-auto-mode)
          (use-local-map agb-git-blame-show-revision-keymap)
          (setq buffer-file-name nil)
          (goto-char (point-min))
          (font-lock-fontify-buffer)
          (setq buffer-read-only t))
      )
    )
  )

(defun agb-git-blame-toggle-smaller ()
  (interactive)
  (setq agb-git-blame-showing-smaller (not agb-git-blame-showing-smaller))
  (if (and (agb-git-blame-filename)
           (>= (length agb-git-blame-commit-chain) 1))
      (agb-git-blame (car agb-git-blame-commit-chain)))
  )

(provide 'agb-git-blame)