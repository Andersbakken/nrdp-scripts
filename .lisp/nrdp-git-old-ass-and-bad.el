(defvar-local magit-hidden-stash-overlay nil)
(defvar-local magit-hide-stashes t)
(defcustom magit-max-stashes 0 "How many stashes to display" :type 'number :group 'magit)

(defun magit-limit-stashes-hook ()
  (when (> magit-max-stashes 0)
    (save-excursion
      (goto-char (point-min))
      (when (search-forward-regexp "^Stashes:$" nil t)
        (let ((stashes-beginning (match-beginning 0))
              (buffer-read-only nil))
          (if (and (buffer-local-value 'magit-hide-stashes (current-buffer))
                   (search-forward-regexp (format "^%d: " magit-max-stashes) nil t))
              (let ((start (point-at-bol))
                    (end (or (search-forward-regexp "^$" nil t)
                             (point-max))))
                (setq-local magit-hidden-stash-overlay (make-overlay start end))
                (overlay-put magit-hidden-stash-overlay 'invisible t)))
          (goto-char stashes-beginning)
          (delete-char 8)
          (insert-button "Stashes:" 'action (lambda (x)
                                              (setq magit-hide-stashes (not magit-hide-stashes))
                                              (if magit-hide-stashes
                                                  (magit-limit-stashes-hook)
                                                (when (buffer-local-value 'magit-hidden-stash-overlay (current-buffer))
                                                  (delete-overlay magit-hidden-stash-overlay)
                                                  (setq magit-hidden-stash-overlay nil))))))))))

(add-hook 'magit-refresh-status-hook 'magit-limit-stashes-hook)

(defun misc-magit-add-action (group key name func)
  (interactive)
  (let ((group-actions (assoc-default 'actions (assoc-default group magit-key-mode-groups))))
    (add-to-list 'group-actions (list key name func))
    (push 'actions group-actions)
    (setf (second (assoc-default group magit-key-mode-groups)) group-actions)
    (setq magit-key-mode-keymaps 'nil)))

(defun magit-toggle-whitespace ()
  (interactive)
  (if (member "-w" magit-diff-options)
      (magit-dont-ignore-whitespace)
    (magit-ignore-whitespace)))

(defun magit-ignore-whitespace ()
  (interactive)
  (add-to-list 'magit-diff-options "-w")
  (magit-refresh))

(defun magit-dont-ignore-whitespace ()
  (interactive)
  (setq magit-diff-options (remove "-w" magit-diff-options))
  (magit-refresh))

(misc-magit-add-action 'pulling "S" "Sync" 'magit-sync)
(misc-magit-add-action 'pushing "J" "Jira" 'magit-jira)
(misc-magit-add-action 'pushing "R" "Jira (Don't resolve)" 'magit-jira-no-resolve)
(misc-magit-add-action 'pushing "S" "Submit" 'magit-submit)
(misc-magit-add-action 'pushing "C" "Choose" 'magit-choose-push)
(misc-magit-add-action 'pushing "A" "Submit All" 'magit-submit-all)
(misc-magit-add-action 'pushing "I" "Ignore" 'magit-ignore)
(misc-magit-add-action 'logging "b" "Blame" 'magit-blame-for-current-revision)

(defun magit-choose-push ()
  (interactive)
  (let* ((remote
          (with-temp-buffer
            (call-process "git" nil t nil "remote")
            (let ((remotes (split-string (buffer-string))))
              (if (= (length remotes) 1)
                  (car remotes)
                (ido-completing-read "Remote: " remotes)))))
         (branch
          (with-temp-buffer
            (call-process "git" nil t nil "branch" "-r")
            (goto-char (point-min))
            (let ((match (concat "^ *" remote "/\\(.*\\)$"))
                  (branches))
              (while (not (eobp))
                (when (looking-at match)
                  (push (match-string 1) branches))
                (forward-line 1))
              (if branches
                  (ido-completing-read "Branch: " branches)
                (read-from-minibuffer "Branch: "))))))
    (when (and branch remote)
      (magit-run-git-async "push" remote (concat "HEAD:" branch) magit-custom-options))))

(defun magit-current-section-string ()
  (let* ((section (magit-current-section))
         (info (and section (magit-section-info section))))
    (cond ((and (listp info) (stringp (nth 1 info))) (nth 1 info))
          ((stringp info) info)
          (t nil))))
(defalias 'magit-toplevel 'magit-get-top-dir)
(defalias 'magit-ediff-dwim 'magit-ediff)
(defalias 'magit-get-tracked-branch 'magit-get-remote/branch)
(defalias 'magit-diff-less-context 'magit-diff-smaller-hunks)
(defalias 'magit-log-popup 'magit-key-mode-popup-logging)

(defun nrdp-git-magit-cherry-pick (&optional commit)
  (interactive)
  (let ((branches))
    (with-temp-buffer
      (when (eq 0 (call-process "git" nil t nil "branch"))
        (goto-char (point-min))
        (while (not (eobp))
          ;; (message (buffer-substring-no-properties (point-at-bol) (point-at-eol)))
          (skip-chars-forward " *")
          (push (buffer-substring-no-properties (point) (point-at-eol)) branches)
          (forward-line 1))))
    (with-temp-buffer
      (when (eq 0 (call-process "git" nil t nil "branch" "-r"))
        (goto-char (point-min))
        (while (not (eobp))
          ;; (message (buffer-substring-no-properties (point-at-bol) (point-at-eol)))
          (skip-chars-forward " ")
          (push (buffer-substring-no-properties (point) (point-at-eol)) branches)
          (forward-line 1))))
    ;; (message (combine-and-quote-strings branches))
    (unless commit
      (setq commit (ido-completing-read "Commit: " branches)))
    (if (> (length commit) 0)
        (magit-cherry-pick-commit commit)
      (error "Nothing to cherry-pick"))))

(defun nrdp-git-magit-file-log (&optional bufferorfilename)
  (interactive)
  (let ((file (cond ((bufferp bufferorfilename) (buffer-file-name bufferorfilename))
                    ((stringp bufferorfilename) bufferorfilename)
                    ((and (boundp 'magit-buffer-file-name) magit-buffer-file-name))
                    (t nil))))
    (if file
        (magit-file-log (file-truename file))
      (call-interactively 'magit-file-log))))

(provide 'nrdp-git-old-ass-and-bad)
